// Code generated by wunderctl. DO NOT EDIT.

import React, { useEffect, useState } from "react";
import { Response } from "./client";
import {
	CreateMessageInput,
	CreateMessageResponse,
	GetMessagesInput,
	GetMessagesResponse,
	UpdateAvatarIdInput,
	UpdateAvatarIdResponse,
	UpdateProfileInput,
	UpdateProfileResponse,
	UserCreateInput,
	UserCreateResponse,
	UserUpdateInput,
	UserUpdateResponse,
	UserUpsertInput,
	UserUpsertResponse,
} from "./models";
import { useQuery, useLiveQuery, useMutation } from "./hooks";
import jsonSchema from "./jsonschema";
import Form from "@rjsf/core";

export interface FormProps<T> {
	onResult?: (result: T) => void;
	liveValidate?: boolean;
}

export interface MutationFormProps<T> extends FormProps<T> {
	refetchMountedQueriesOnSuccess?: boolean;
}

export const CreateMessageForm: React.FC<MutationFormProps<Response<CreateMessageResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<CreateMessageInput>();
	const { mutate, response } = useMutation.CreateMessage({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.CreateMessage.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};
export const UpdateAvatarIdForm: React.FC<MutationFormProps<Response<UpdateAvatarIdResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<UpdateAvatarIdInput>();
	const { mutate, response } = useMutation.UpdateAvatarId({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.UpdateAvatarId.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};
export const UpdateProfileForm: React.FC<MutationFormProps<Response<UpdateProfileResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<UpdateProfileInput>();
	const { mutate, response } = useMutation.UpdateProfile({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.UpdateProfile.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};
export const UserCreateForm: React.FC<MutationFormProps<Response<UserCreateResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<UserCreateInput>();
	const { mutate, response } = useMutation.UserCreate({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.UserCreate.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};
export const UserUpdateForm: React.FC<MutationFormProps<Response<UserUpdateResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<UserUpdateInput>();
	const { mutate, response } = useMutation.UserUpdate({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.UserUpdate.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};
export const UserUpsertForm: React.FC<MutationFormProps<Response<UserUpsertResponse>>> = ({
	onResult,
	refetchMountedQueriesOnSuccess,
	liveValidate,
}) => {
	const [formData, setFormData] = useState<UserUpsertInput>();
	const { mutate, response } = useMutation.UserUpsert({ refetchMountedQueriesOnSuccess });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.UserUpsert.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await mutate({ input: e.formData, refetchMountedQueriesOnSuccess });
					setFormData(undefined);
				}}
			/>
		</div>
	);
};

export const GetMessagesForm: React.FC<FormProps<Response<GetMessagesResponse>>> = ({ onResult, liveValidate }) => {
	const [formData, setFormData] = useState<GetMessagesInput>();
	const { response, refetch } = useQuery.GetMessages({ input: formData });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.GetMessages.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				onSubmit={async (e) => {
					await refetch({ input: formData });
				}}
			/>
		</div>
	);
};

export const GetMessagesLiveForm: React.FC<FormProps<Response<GetMessagesResponse>>> = ({ onResult, liveValidate }) => {
	const [formData, setFormData] = useState<GetMessagesInput>();
	const { response } = useLiveQuery.GetMessages({ input: formData });
	useEffect(() => {
		if (onResult) {
			onResult(response);
		}
	}, [response]);
	return (
		<div>
			<Form
				schema={jsonSchema.GetMessages.input}
				formData={formData}
				liveValidate={liveValidate}
				onChange={(e) => {
					setFormData(e.formData);
				}}
				children={<></>}
			/>
		</div>
	);
};
