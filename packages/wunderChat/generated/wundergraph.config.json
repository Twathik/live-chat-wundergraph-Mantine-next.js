{
  "apiName": "api",
  "apiId": "",
  "deploymentName": "main",
  "environmentIds": [
    ""
  ],
  "api": {
    "enableGraphqlEndpoint": false,
    "operations": [
      {
        "content": "query GetUsers {\n  usersDb_findManyUser {\n    id\n    email\n    name\n  }\n}\n",
        "name": "GetUsers",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_findManyUser\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\"]}}},\"additionalProperties\":false,\"required\":[\"usersDb_findManyUser\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation CreateMessage($message: String!, $email: String! @fromClaim(name: EMAIL)) {\n  usersDb_createOneChat(\n    data: {message: $message, User: {connect: {email: $email}}}\n  ) {\n    id\n    message\n    userId\n  }\n}\n",
        "name": "CreateMessage",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_createOneChat\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\",\"userId\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"message\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"message\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query GetMessages($take: Int, $skip: Int) {\n  usersDb_findManyChat(orderBy: [{id: asc}], take: $take, skip: $skip) {\n    id\n    message\n    createdAt\n    User {\n      userId\n      firstName\n    }\n  }\n}\n",
        "name": "GetMessages",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_findManyChat\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"},\"User\":{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"userId\",\"firstName\"]}},\"additionalProperties\":false,\"required\":[\"id\",\"createdAt\",\"User\"]}}},\"additionalProperties\":false,\"required\":[\"usersDb_findManyChat\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"take\":{\"type\":\"integer\"},\"skip\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"take\":{\"type\":\"integer\"},\"skip\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "query GetUser($email: String! @fromClaim(name: EMAIL)) {\n  usersDb_findUniqueUser(where: {email: $email}) {\n    id\n    firstName\n    lastName\n    email\n  }\n}\n",
        "name": "GetUser",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_findUniqueUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"firstName\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"firstName\",\"lastName\",\"email\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"definitions\":{}}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 1
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UpdateAvatarId($email: String! @fromClaim(name: EMAIL), $avatarId: usersDb_NullableStringFieldUpdateOperationsInput @jsonSchema(title: \"AvatarId\", description: \"Write something meaningful\", pattern: \"^[a-zA-Z 0-9]+$\")) {\n  usersDb_updateOneUser(where: {email: $email}, data: {avatarId: $avatarId}) {\n    id\n    avatarId\n  }\n}\n",
        "name": "UpdateAvatarId",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_updateOneUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"avatarId\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"avatarId\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\",\"title\":\"AvatarId\",\"description\":\"Write something meaningful\",\"pattern\":\"^[a-zA-Z 0-9]+$\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_NullableStringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}}}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"avatarId\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_NullableStringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}}}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UpdateProfile($email: String! @fromClaim(name: EMAIL), $firstName: usersDb_StringFieldUpdateOperationsInput!, $lastName: usersDb_StringFieldUpdateOperationsInput!) {\n  usersDb_updateOneUser(\n    where: {email: $email}\n    data: {firstName: $firstName, lastName: $lastName}\n  ) {\n    id\n  }\n}\n",
        "name": "UpdateProfile",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_updateOneUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"lastName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}},\"required\":[\"firstName\",\"lastName\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"lastName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}},\"required\":[\"firstName\",\"lastName\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UserCreate($email: String!, $userId: String!, $name: String!, $lastName: String!, $firstName: String! @jsonSchema(title: \"Prénom\", description: \"Veuillez introduire votre prénom\", minLength: 2, maxLength: 250)) {\n  usersDb_createOneUser(\n    data: {email: $email, userId: $userId, name: $name, lastName: $lastName, firstName: $firstName}\n  ) {\n    id\n  }\n}\n",
        "name": "UserCreate",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_createOneUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\",\"title\":\"Prénom\",\"description\":\"Veuillez introduire votre prénom\",\"minLength\":2,\"maxLength\":250}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\",\"userId\",\"name\",\"lastName\",\"firstName\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"}},\"additionalProperties\":false,\"definitions\":{},\"required\":[\"email\",\"userId\",\"name\",\"lastName\",\"firstName\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UserUpdate($email: String! @fromClaim(name: EMAIL), $firstName: usersDb_StringFieldUpdateOperationsInput! @jsonSchema(title: \"Prénom\", description: \"Veuillez introduire votre prénom\", minLength: 2, maxLength: 250)) {\n  usersDb_updateOneUser(where: {email: $email}, data: {firstName: $firstName}) {\n    id\n  }\n}\n",
        "name": "UserUpdate",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_updateOneUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"additionalProperties\":false,\"required\":[\"id\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\",\"title\":\"Prénom\",\"description\":\"Veuillez introduire votre prénom\",\"minLength\":2,\"maxLength\":250}},\"additionalProperties\":false,\"definitions\":{\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}},\"required\":[\"firstName\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}}},\"required\":[\"firstName\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      },
      {
        "content": "mutation UserUpsert($userId: String!, $create: usersDb_UserCreateInput!, $update: usersDb_UserUpdateInput!) {\n  usersDb_upsertOneUser(\n    where: {userId: $userId}\n    create: $create\n    update: $update\n  ) {\n    id\n    email\n    name\n    avatarId\n    firstName\n    lastName\n  }\n}\n",
        "name": "UserUpsert",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"usersDb_upsertOneUser\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"avatarId\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"email\",\"name\",\"firstName\",\"lastName\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"create\":{\"$ref\":\"#/definitions/usersDb_UserCreateInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_UserUpdateInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_UserCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"avatarId\":{\"type\":\"string\"},\"Chat\":{\"$ref\":\"#/definitions/usersDb_ChatCreateNestedManyWithoutUserInput\"}},\"required\":[\"email\",\"lastName\",\"firstName\",\"name\",\"userId\"]},\"usersDb_ChatCreateNestedManyWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/usersDb_ChatCreateOrConnectWithoutUserInput\"},\"createMany\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInputEnvelope\"},\"connect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"}}},\"usersDb_ChatCreateWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"}}},\"usersDb_ChatCreateOrConnectWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"}},\"required\":[\"where\",\"create\"]},\"usersDb_ChatWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}}},\"usersDb_ChatCreateManyUserInputEnvelope\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInput\"}},\"skipDuplicates\":{\"type\":\"boolean\"}},\"required\":[\"data\"]},\"usersDb_ChatCreateManyUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"}}},\"usersDb_UserUpdateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"lastName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"name\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"userId\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"avatarId\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"Chat\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyWithoutUserInput\"}}},\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_NullableStringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_ChatUpdateManyWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/usersDb_ChatCreateOrConnectWithoutUserInput\"},\"upsert\":{\"$ref\":\"#/definitions/usersDb_ChatUpsertWithWhereUniqueWithoutUserInput\"},\"createMany\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInputEnvelope\"},\"connect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"set\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"disconnect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"delete\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithWhereUniqueWithoutUserInput\"},\"updateMany\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyWithWhereWithoutUserInput\"},\"deleteMany\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"}}},\"usersDb_ChatUpsertWithWhereUniqueWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithoutUserInput\"},\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"}},\"required\":[\"where\",\"update\",\"create\"]},\"usersDb_ChatUpdateWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFieldUpdateOperationsInput\"}}},\"usersDb_DateTimeFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_ChatUpdateWithWhereUniqueWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"data\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithoutUserInput\"}},\"required\":[\"where\",\"data\"]},\"usersDb_ChatUpdateManyWithWhereWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"data\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyMutationInput\"}},\"required\":[\"where\",\"data\"]},\"usersDb_ChatScalarWhereInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"AND\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"OR\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"}},\"NOT\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"id\":{\"$ref\":\"#/definitions/usersDb_IntFilter\"},\"message\":{\"$ref\":\"#/definitions/usersDb_StringNullableFilter\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFilter\"},\"userId\":{\"$ref\":\"#/definitions/usersDb_IntFilter\"}}},\"usersDb_IntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedIntFilter\"}}},\"usersDb_NestedIntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedIntFilter\"}}},\"usersDb_StringNullableFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"mode\":{\"type\":\"string\",\"enum\":[\"default\",\"insensitive\"]},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedStringNullableFilter\"}}},\"usersDb_NestedStringNullableFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedStringNullableFilter\"}}},\"usersDb_DateTimeFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedDateTimeFilter\"}}},\"usersDb_NestedDateTimeFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedDateTimeFilter\"}}},\"usersDb_ChatUpdateManyMutationInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFieldUpdateOperationsInput\"}}}},\"required\":[\"userId\",\"create\",\"update\"]}",
        "interpolationVariablesSchema": "{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"create\":{\"$ref\":\"#/definitions/usersDb_UserCreateInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_UserUpdateInput\"}},\"additionalProperties\":false,\"definitions\":{\"usersDb_UserCreateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"lastName\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"avatarId\":{\"type\":\"string\"},\"Chat\":{\"$ref\":\"#/definitions/usersDb_ChatCreateNestedManyWithoutUserInput\"}},\"required\":[\"email\",\"lastName\",\"firstName\",\"name\",\"userId\"]},\"usersDb_ChatCreateNestedManyWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/usersDb_ChatCreateOrConnectWithoutUserInput\"},\"createMany\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInputEnvelope\"},\"connect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"}}},\"usersDb_ChatCreateWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"}}},\"usersDb_ChatCreateOrConnectWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"}},\"required\":[\"where\",\"create\"]},\"usersDb_ChatWhereUniqueInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}}},\"usersDb_ChatCreateManyUserInputEnvelope\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInput\"}},\"skipDuplicates\":{\"type\":\"boolean\"}},\"required\":[\"data\"]},\"usersDb_ChatCreateManyUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"}}},\"usersDb_UserUpdateInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"email\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"lastName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"firstName\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"name\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"userId\":{\"$ref\":\"#/definitions/usersDb_StringFieldUpdateOperationsInput\"},\"avatarId\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"Chat\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyWithoutUserInput\"}}},\"usersDb_StringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_NullableStringFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_ChatUpdateManyWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"},\"connectOrCreate\":{\"$ref\":\"#/definitions/usersDb_ChatCreateOrConnectWithoutUserInput\"},\"upsert\":{\"$ref\":\"#/definitions/usersDb_ChatUpsertWithWhereUniqueWithoutUserInput\"},\"createMany\":{\"$ref\":\"#/definitions/usersDb_ChatCreateManyUserInputEnvelope\"},\"connect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"set\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"disconnect\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"delete\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithWhereUniqueWithoutUserInput\"},\"updateMany\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyWithWhereWithoutUserInput\"},\"deleteMany\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"}}},\"usersDb_ChatUpsertWithWhereUniqueWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"update\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithoutUserInput\"},\"create\":{\"$ref\":\"#/definitions/usersDb_ChatCreateWithoutUserInput\"}},\"required\":[\"where\",\"update\",\"create\"]},\"usersDb_ChatUpdateWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFieldUpdateOperationsInput\"}}},\"usersDb_DateTimeFieldUpdateOperationsInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"set\":{\"type\":\"string\"}}},\"usersDb_ChatUpdateWithWhereUniqueWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatWhereUniqueInput\"},\"data\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateWithoutUserInput\"}},\"required\":[\"where\",\"data\"]},\"usersDb_ChatUpdateManyWithWhereWithoutUserInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"where\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"data\":{\"$ref\":\"#/definitions/usersDb_ChatUpdateManyMutationInput\"}},\"required\":[\"where\",\"data\"]},\"usersDb_ChatScalarWhereInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"AND\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"OR\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"}},\"NOT\":{\"$ref\":\"#/definitions/usersDb_ChatScalarWhereInput\"},\"id\":{\"$ref\":\"#/definitions/usersDb_IntFilter\"},\"message\":{\"$ref\":\"#/definitions/usersDb_StringNullableFilter\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFilter\"},\"userId\":{\"$ref\":\"#/definitions/usersDb_IntFilter\"}}},\"usersDb_IntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedIntFilter\"}}},\"usersDb_NestedIntFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"integer\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}},\"lt\":{\"type\":\"integer\"},\"lte\":{\"type\":\"integer\"},\"gt\":{\"type\":\"integer\"},\"gte\":{\"type\":\"integer\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedIntFilter\"}}},\"usersDb_StringNullableFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"mode\":{\"type\":\"string\",\"enum\":[\"default\",\"insensitive\"]},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedStringNullableFilter\"}}},\"usersDb_NestedStringNullableFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"contains\":{\"type\":\"string\"},\"startsWith\":{\"type\":\"string\"},\"endsWith\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedStringNullableFilter\"}}},\"usersDb_DateTimeFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedDateTimeFilter\"}}},\"usersDb_NestedDateTimeFilter\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"equals\":{\"type\":\"string\"},\"in\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"notIn\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"lt\":{\"type\":\"string\"},\"lte\":{\"type\":\"string\"},\"gt\":{\"type\":\"string\"},\"gte\":{\"type\":\"string\"},\"not\":{\"$ref\":\"#/definitions/usersDb_NestedDateTimeFilter\"}}},\"usersDb_ChatUpdateManyMutationInput\":{\"additionalProperties\":false,\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/definitions/usersDb_NullableStringFieldUpdateOperationsInput\"},\"createdAt\":{\"$ref\":\"#/definitions/usersDb_DateTimeFieldUpdateOperationsInput\"}}}},\"required\":[\"userId\",\"create\",\"update\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          },
          "httpTransportOnResponse": false,
          "httpTransportOnRequest": false,
          "customResolve": false
        },
        "variablesConfiguration": {
          "injectVariables": []
        },
        "internal": false,
        "postResolveTransformations": []
      }
    ],
    "engineConfiguration": {
      "defaultFlushInterval": 500,
      "graphqlSchema": "directive @fromClaim(name: Claim) on VARIABLE_DEFINITION\n\ndirective @hooksVariable on VARIABLE_DEFINITION\n\ndirective @jsonSchema(\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  title: String\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  description: String\n  \"\"\"\n  The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n  \n  A numeric instance is valid only if division by this keyword's value\n  results in an integer.\n  \"\"\"\n  multipleOf: Int\n  \"\"\"\n  The value of \"maximum\" MUST be a number, representing an inclusive\n  upper limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is less than or exactly equal to \"maximum\".\n  \"\"\"\n  maximum: Int\n  \"\"\"\n  The value of \"exclusiveMaximum\" MUST be number, representing an\n  exclusive upper limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly less than (not equal to) \"exclusiveMaximum\".\n  \"\"\"\n  exclusiveMaximum: Int\n  \"\"\"\n  The value of \"minimum\" MUST be a number, representing an inclusive\n  lower limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is greater than or exactly equal to \"minimum\".\n  \"\"\"\n  minimum: Int\n  \"\"\"\n  The value of \"exclusiveMinimum\" MUST be number, representing an\n  exclusive lower limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n  \"\"\"\n  exclusiveMinimum: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is less\n  than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \"\"\"\n  maxLength: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is\n  greater than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minLength: Int\n  \"\"\"\n  The value of this keyword MUST be a string.  This string SHOULD be a\n  valid regular expression, according to the ECMA 262 regular\n  expression dialect.\n  \n  A string instance is considered valid if the regular expression\n  matches the instance successfully.  Recall: regular expressions are\n  not implicitly anchored.\n  \"\"\"\n  pattern: String\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"maxItems\" if its size is less\n  than, or equal to, the value of this keyword.\n  \"\"\"\n  maxItems: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"minItems\" if its size is greater\n  than, or equal to, the value of this keyword.\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minItems: Int\n  \"\"\"\n  The value of this keyword MUST be a boolean.\n  \n  If this keyword has boolean value false, the instance validates\n  successfully.  If it has boolean value true, the instance validates\n  successfully if all of its elements are unique.\n  \n  Omitting this keyword has the same behavior as a value of false.\n  \"\"\"\n  uniqueItems: Boolean\n  commonPattern: COMMON_REGEX_PATTERN\n) on VARIABLE_DEFINITION\n\ndirective @rbac(\n  \"\"\"the user must match all roles\"\"\"\n  requireMatchAll: [WG_ROLE]\n  \"\"\"the user must match at least one of the roles\"\"\"\n  requireMatchAny: [WG_ROLE]\n  \"\"\"the user must not match all of the roles\"\"\"\n  denyMatchAll: [WG_ROLE]\n  \"\"\"the user must not match any of the roles\"\"\"\n  denyMatchAny: [WG_ROLE]\n) on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"\nThe directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.\nThis variable MUST be a string compatible scalar. \n\nThe default format, is: ISO 8601\nIf no format is chosen, the default format is used.\nCustom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.\n\"\"\"\ndirective @injectCurrentDateTime(\n  format: WunderGraphDateTimeFormat = ISO8601\n  \"\"\"customFormat must conform to the Golang specification for specifying a date time format\"\"\"\n  customFormat: String\n) on VARIABLE_DEFINITION\n\n\"\"\"\nThe directive @injectGeneratedUUID injects a generated UUID into the variable.\nThis variable MUST be a string.\nAt the same time, it removes the variable from the input definition,\ndisallowing the user to supply it.\n\nThis means, the UUID is 100% generated server-side and can be considered untempered.\n\"\"\"\ndirective @injectGeneratedUUID on VARIABLE_DEFINITION\n\n\"\"\"\nThe @internalOperation Directive marks an Operation as internal.\nBy doing so, the Operation is no longer accessible from the public API.\nIt can only be accessed by internal services, like hooks.\n\"\"\"\ndirective @internalOperation on QUERY | MUTATION | SUBSCRIPTION\n\n\"\"\"The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.\"\"\"\ndirective @injectEnvironmentVariable(name: String!) on VARIABLE_DEFINITION\n\n\"\"\"\nThe @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.\nAs the execution is depth first, a field can only be used after it has been exported.\nAdditionally, a field can only be used after using the '_join' field or on a different data source.\nIt's not possible to export a field and use it in for the same data source.\n\nNote that the @export directive only works on fields that return a single value.\nIt's not possible to export a list or object field.\n\"\"\"\ndirective @export(\n  \"\"\"The argument 'as' is the name of the variable to export the field to.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nThe directive @internal marks a variable definition as internal so that clients can't access it.\nThe field is also not visible in the public API.\nIt's only being used as an internal variable to export fields into.\n\"\"\"\ndirective @internal on VARIABLE_DEFINITION\n\n\"\"\"\nThe @transform directive allows to apply transformations to the response.\nBy applying the directive, the shape of the response can be altered,\nwhich will also modify the JSON-Schema of the response.\nThat is, you will keep full type safety and code-generation for transformed fields.\n\"\"\"\ndirective @transform(\n  \"\"\"\n  Using the 'get' transformation allows you to extract a nested field using a JSON path.\n  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.\n  \n  Example:\n  \n  query GetName {\n      name: me @transform(get: \"info.name\") {\n          info {\n              name\n          }\n      }\n  }\n  \n  Before the transformation, the resolve looks like this:\n  \n  {\n      \"name\": {\n          \"info\": {\n              \"name\": \"John Doe\"\n          }\n      }\n  }\n  \n  With the transformation applied, the response will be reshaped like this:\n  \n  {\n      \"name\": \"John Doe\"\n  }\n  \"\"\"\n  get: String\n) on FIELD\n\ninput usersDb_NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: usersDb_NestedIntFilter\n}\n\ninput usersDb_IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: usersDb_NestedIntFilter\n}\n\nenum usersDb_QueryMode {\n  default\n  insensitive\n}\n\ninput usersDb_NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: usersDb_NestedStringNullableFilter\n}\n\ninput usersDb_StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: usersDb_QueryMode\n  not: usersDb_NestedStringNullableFilter\n}\n\ninput usersDb_NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: usersDb_NestedDateTimeFilter\n}\n\ninput usersDb_DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: usersDb_NestedDateTimeFilter\n}\n\ninput usersDb_NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: usersDb_NestedStringFilter\n}\n\ninput usersDb_StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: usersDb_QueryMode\n  not: usersDb_NestedStringFilter\n}\n\ninput usersDb_ChatListRelationFilter {\n  every: usersDb_ChatWhereInput\n  some: usersDb_ChatWhereInput\n  none: usersDb_ChatWhereInput\n}\n\ninput usersDb_UserWhereInput {\n  AND: usersDb_UserWhereInput\n  OR: [usersDb_UserWhereInput]\n  NOT: usersDb_UserWhereInput\n  id: usersDb_IntFilter\n  email: usersDb_StringFilter\n  lastName: usersDb_StringFilter\n  firstName: usersDb_StringFilter\n  name: usersDb_StringFilter\n  userId: usersDb_StringFilter\n  avatarId: usersDb_StringNullableFilter\n  Chat: usersDb_ChatListRelationFilter\n}\n\ninput usersDb_UserRelationFilter {\n  is: usersDb_UserWhereInput\n  isNot: usersDb_UserWhereInput\n}\n\ninput usersDb_ChatWhereInput {\n  AND: usersDb_ChatWhereInput\n  OR: [usersDb_ChatWhereInput]\n  NOT: usersDb_ChatWhereInput\n  id: usersDb_IntFilter\n  message: usersDb_StringNullableFilter\n  createdAt: usersDb_DateTimeFilter\n  userId: usersDb_IntFilter\n  User: usersDb_UserRelationFilter\n}\n\nenum usersDb_SortOrder {\n  asc\n  desc\n}\n\ninput usersDb_ChatOrderByRelationAggregateInput {\n  _count: usersDb_SortOrder\n}\n\ninput usersDb_UserOrderByWithRelationInput {\n  id: usersDb_SortOrder\n  email: usersDb_SortOrder\n  lastName: usersDb_SortOrder\n  firstName: usersDb_SortOrder\n  name: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  avatarId: usersDb_SortOrder\n  Chat: usersDb_ChatOrderByRelationAggregateInput\n}\n\ninput usersDb_ChatOrderByWithRelationInput {\n  id: usersDb_SortOrder\n  message: usersDb_SortOrder\n  createdAt: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  User: usersDb_UserOrderByWithRelationInput\n}\n\ninput usersDb_ChatWhereUniqueInput {\n  id: Int\n}\n\nenum usersDb_ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype usersDb_UserCountOutputType {\n  Chat: Int!\n  _join: Query!\n}\n\ntype usersDb_User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: usersDb_ChatWhereInput, orderBy: [usersDb_ChatOrderByWithRelationInput], cursor: usersDb_ChatWhereUniqueInput, take: Int, skip: Int, distinct: [usersDb_ChatScalarFieldEnum]): [usersDb_Chat]\n  _count: usersDb_UserCountOutputType\n  _join: Query!\n}\n\ntype usersDb_Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: usersDb_User!\n  _join: Query!\n}\n\ntype usersDb_ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype usersDb_ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n  _join: Query!\n}\n\ntype usersDb_ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n  _join: Query!\n}\n\ntype usersDb_ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n  _join: Query!\n}\n\ntype usersDb_ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n  _join: Query!\n}\n\ntype usersDb_AggregateChat {\n  _count: usersDb_ChatCountAggregateOutputType\n  _avg: usersDb_ChatAvgAggregateOutputType\n  _sum: usersDb_ChatSumAggregateOutputType\n  _min: usersDb_ChatMinAggregateOutputType\n  _max: usersDb_ChatMaxAggregateOutputType\n  _join: Query!\n}\n\ninput usersDb_ChatCountOrderByAggregateInput {\n  id: usersDb_SortOrder\n  message: usersDb_SortOrder\n  createdAt: usersDb_SortOrder\n  userId: usersDb_SortOrder\n}\n\ninput usersDb_ChatAvgOrderByAggregateInput {\n  id: usersDb_SortOrder\n  userId: usersDb_SortOrder\n}\n\ninput usersDb_ChatMaxOrderByAggregateInput {\n  id: usersDb_SortOrder\n  message: usersDb_SortOrder\n  createdAt: usersDb_SortOrder\n  userId: usersDb_SortOrder\n}\n\ninput usersDb_ChatMinOrderByAggregateInput {\n  id: usersDb_SortOrder\n  message: usersDb_SortOrder\n  createdAt: usersDb_SortOrder\n  userId: usersDb_SortOrder\n}\n\ninput usersDb_ChatSumOrderByAggregateInput {\n  id: usersDb_SortOrder\n  userId: usersDb_SortOrder\n}\n\ninput usersDb_ChatOrderByWithAggregationInput {\n  id: usersDb_SortOrder\n  message: usersDb_SortOrder\n  createdAt: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  _count: usersDb_ChatCountOrderByAggregateInput\n  _avg: usersDb_ChatAvgOrderByAggregateInput\n  _max: usersDb_ChatMaxOrderByAggregateInput\n  _min: usersDb_ChatMinOrderByAggregateInput\n  _sum: usersDb_ChatSumOrderByAggregateInput\n}\n\ninput usersDb_NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: usersDb_NestedFloatFilter\n}\n\ninput usersDb_NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: usersDb_NestedIntWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _avg: usersDb_NestedFloatFilter\n  _sum: usersDb_NestedIntFilter\n  _min: usersDb_NestedIntFilter\n  _max: usersDb_NestedIntFilter\n}\n\ninput usersDb_IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: usersDb_NestedIntWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _avg: usersDb_NestedFloatFilter\n  _sum: usersDb_NestedIntFilter\n  _min: usersDb_NestedIntFilter\n  _max: usersDb_NestedIntFilter\n}\n\ninput usersDb_NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: usersDb_NestedIntNullableFilter\n}\n\ninput usersDb_NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: usersDb_NestedStringNullableWithAggregatesFilter\n  _count: usersDb_NestedIntNullableFilter\n  _min: usersDb_NestedStringNullableFilter\n  _max: usersDb_NestedStringNullableFilter\n}\n\ninput usersDb_StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: usersDb_QueryMode\n  not: usersDb_NestedStringNullableWithAggregatesFilter\n  _count: usersDb_NestedIntNullableFilter\n  _min: usersDb_NestedStringNullableFilter\n  _max: usersDb_NestedStringNullableFilter\n}\n\ninput usersDb_NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: usersDb_NestedDateTimeWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _min: usersDb_NestedDateTimeFilter\n  _max: usersDb_NestedDateTimeFilter\n}\n\ninput usersDb_DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: usersDb_NestedDateTimeWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _min: usersDb_NestedDateTimeFilter\n  _max: usersDb_NestedDateTimeFilter\n}\n\ninput usersDb_ChatScalarWhereWithAggregatesInput {\n  AND: usersDb_ChatScalarWhereWithAggregatesInput\n  OR: [usersDb_ChatScalarWhereWithAggregatesInput]\n  NOT: usersDb_ChatScalarWhereWithAggregatesInput\n  id: usersDb_IntWithAggregatesFilter\n  message: usersDb_StringNullableWithAggregatesFilter\n  createdAt: usersDb_DateTimeWithAggregatesFilter\n  userId: usersDb_IntWithAggregatesFilter\n}\n\ntype usersDb_ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: usersDb_ChatCountAggregateOutputType\n  _avg: usersDb_ChatAvgAggregateOutputType\n  _sum: usersDb_ChatSumAggregateOutputType\n  _min: usersDb_ChatMinAggregateOutputType\n  _max: usersDb_ChatMaxAggregateOutputType\n  _join: Query!\n}\n\ninput usersDb_UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum usersDb_UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype usersDb_UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n  _join: Query!\n}\n\ntype usersDb_UserAvgAggregateOutputType {\n  id: Float\n  _join: Query!\n}\n\ntype usersDb_UserSumAggregateOutputType {\n  id: Int\n  _join: Query!\n}\n\ntype usersDb_UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n  _join: Query!\n}\n\ntype usersDb_UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n  _join: Query!\n}\n\ntype usersDb_AggregateUser {\n  _count: usersDb_UserCountAggregateOutputType\n  _avg: usersDb_UserAvgAggregateOutputType\n  _sum: usersDb_UserSumAggregateOutputType\n  _min: usersDb_UserMinAggregateOutputType\n  _max: usersDb_UserMaxAggregateOutputType\n  _join: Query!\n}\n\ninput usersDb_UserCountOrderByAggregateInput {\n  id: usersDb_SortOrder\n  email: usersDb_SortOrder\n  lastName: usersDb_SortOrder\n  firstName: usersDb_SortOrder\n  name: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  avatarId: usersDb_SortOrder\n}\n\ninput usersDb_UserAvgOrderByAggregateInput {\n  id: usersDb_SortOrder\n}\n\ninput usersDb_UserMaxOrderByAggregateInput {\n  id: usersDb_SortOrder\n  email: usersDb_SortOrder\n  lastName: usersDb_SortOrder\n  firstName: usersDb_SortOrder\n  name: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  avatarId: usersDb_SortOrder\n}\n\ninput usersDb_UserMinOrderByAggregateInput {\n  id: usersDb_SortOrder\n  email: usersDb_SortOrder\n  lastName: usersDb_SortOrder\n  firstName: usersDb_SortOrder\n  name: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  avatarId: usersDb_SortOrder\n}\n\ninput usersDb_UserSumOrderByAggregateInput {\n  id: usersDb_SortOrder\n}\n\ninput usersDb_UserOrderByWithAggregationInput {\n  id: usersDb_SortOrder\n  email: usersDb_SortOrder\n  lastName: usersDb_SortOrder\n  firstName: usersDb_SortOrder\n  name: usersDb_SortOrder\n  userId: usersDb_SortOrder\n  avatarId: usersDb_SortOrder\n  _count: usersDb_UserCountOrderByAggregateInput\n  _avg: usersDb_UserAvgOrderByAggregateInput\n  _max: usersDb_UserMaxOrderByAggregateInput\n  _min: usersDb_UserMinOrderByAggregateInput\n  _sum: usersDb_UserSumOrderByAggregateInput\n}\n\ninput usersDb_NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: usersDb_NestedStringWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _min: usersDb_NestedStringFilter\n  _max: usersDb_NestedStringFilter\n}\n\ninput usersDb_StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: usersDb_QueryMode\n  not: usersDb_NestedStringWithAggregatesFilter\n  _count: usersDb_NestedIntFilter\n  _min: usersDb_NestedStringFilter\n  _max: usersDb_NestedStringFilter\n}\n\ninput usersDb_UserScalarWhereWithAggregatesInput {\n  AND: usersDb_UserScalarWhereWithAggregatesInput\n  OR: [usersDb_UserScalarWhereWithAggregatesInput]\n  NOT: usersDb_UserScalarWhereWithAggregatesInput\n  id: usersDb_IntWithAggregatesFilter\n  email: usersDb_StringWithAggregatesFilter\n  lastName: usersDb_StringWithAggregatesFilter\n  firstName: usersDb_StringWithAggregatesFilter\n  name: usersDb_StringWithAggregatesFilter\n  userId: usersDb_StringWithAggregatesFilter\n  avatarId: usersDb_StringNullableWithAggregatesFilter\n}\n\ntype usersDb_UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: usersDb_UserCountAggregateOutputType\n  _avg: usersDb_UserAvgAggregateOutputType\n  _sum: usersDb_UserSumAggregateOutputType\n  _min: usersDb_UserMinAggregateOutputType\n  _max: usersDb_UserMaxAggregateOutputType\n  _join: Query!\n}\n\ntype Query {\n  usersDb_findFirstChat(where: usersDb_ChatWhereInput, orderBy: [usersDb_ChatOrderByWithRelationInput], cursor: usersDb_ChatWhereUniqueInput, take: Int, skip: Int, distinct: [usersDb_ChatScalarFieldEnum]): usersDb_Chat\n  usersDb_findManyChat(where: usersDb_ChatWhereInput, orderBy: [usersDb_ChatOrderByWithRelationInput], cursor: usersDb_ChatWhereUniqueInput, take: Int, skip: Int, distinct: [usersDb_ChatScalarFieldEnum]): [usersDb_Chat]!\n  usersDb_aggregateChat(where: usersDb_ChatWhereInput, orderBy: [usersDb_ChatOrderByWithRelationInput], cursor: usersDb_ChatWhereUniqueInput, take: Int, skip: Int): usersDb_AggregateChat!\n  usersDb_groupByChat(where: usersDb_ChatWhereInput, orderBy: [usersDb_ChatOrderByWithAggregationInput], by: [usersDb_ChatScalarFieldEnum]!, having: usersDb_ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [usersDb_ChatGroupByOutputType]!\n  usersDb_findUniqueChat(where: usersDb_ChatWhereUniqueInput!): usersDb_Chat\n  usersDb_findFirstUser(where: usersDb_UserWhereInput, orderBy: [usersDb_UserOrderByWithRelationInput], cursor: usersDb_UserWhereUniqueInput, take: Int, skip: Int, distinct: [usersDb_UserScalarFieldEnum]): usersDb_User\n  usersDb_findManyUser(where: usersDb_UserWhereInput, orderBy: [usersDb_UserOrderByWithRelationInput], cursor: usersDb_UserWhereUniqueInput, take: Int, skip: Int, distinct: [usersDb_UserScalarFieldEnum]): [usersDb_User]!\n  usersDb_aggregateUser(where: usersDb_UserWhereInput, orderBy: [usersDb_UserOrderByWithRelationInput], cursor: usersDb_UserWhereUniqueInput, take: Int, skip: Int): usersDb_AggregateUser!\n  usersDb_groupByUser(where: usersDb_UserWhereInput, orderBy: [usersDb_UserOrderByWithAggregationInput], by: [usersDb_UserScalarFieldEnum]!, having: usersDb_UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [usersDb_UserGroupByOutputType]!\n  usersDb_findUniqueUser(where: usersDb_UserWhereUniqueInput!): usersDb_User\n}\n\ninput usersDb_UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput usersDb_UserCreateOrConnectWithoutChatInput {\n  where: usersDb_UserWhereUniqueInput!\n  create: usersDb_UserCreateWithoutChatInput!\n}\n\ninput usersDb_UserCreateNestedOneWithoutChatInput {\n  create: usersDb_UserCreateWithoutChatInput\n  connectOrCreate: usersDb_UserCreateOrConnectWithoutChatInput\n  connect: usersDb_UserWhereUniqueInput\n}\n\ninput usersDb_ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: usersDb_UserCreateNestedOneWithoutChatInput!\n}\n\ninput usersDb_NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput usersDb_DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput usersDb_StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput usersDb_UserUpdateWithoutChatInput {\n  email: usersDb_StringFieldUpdateOperationsInput\n  lastName: usersDb_StringFieldUpdateOperationsInput\n  firstName: usersDb_StringFieldUpdateOperationsInput\n  name: usersDb_StringFieldUpdateOperationsInput\n  userId: usersDb_StringFieldUpdateOperationsInput\n  avatarId: usersDb_NullableStringFieldUpdateOperationsInput\n}\n\ninput usersDb_UserUpsertWithoutChatInput {\n  update: usersDb_UserUpdateWithoutChatInput!\n  create: usersDb_UserCreateWithoutChatInput!\n}\n\ninput usersDb_UserUpdateOneRequiredWithoutChatInput {\n  create: usersDb_UserCreateWithoutChatInput\n  connectOrCreate: usersDb_UserCreateOrConnectWithoutChatInput\n  upsert: usersDb_UserUpsertWithoutChatInput\n  connect: usersDb_UserWhereUniqueInput\n  update: usersDb_UserUpdateWithoutChatInput\n}\n\ninput usersDb_ChatUpdateInput {\n  message: usersDb_NullableStringFieldUpdateOperationsInput\n  createdAt: usersDb_DateTimeFieldUpdateOperationsInput\n  User: usersDb_UserUpdateOneRequiredWithoutChatInput\n}\n\ninput usersDb_ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype usersDb_AffectedRowsOutput {\n  count: Int!\n  _join: Query!\n}\n\ninput usersDb_ChatUpdateManyMutationInput {\n  message: usersDb_NullableStringFieldUpdateOperationsInput\n  createdAt: usersDb_DateTimeFieldUpdateOperationsInput\n}\n\ninput usersDb_ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput usersDb_ChatCreateOrConnectWithoutUserInput {\n  where: usersDb_ChatWhereUniqueInput!\n  create: usersDb_ChatCreateWithoutUserInput!\n}\n\ninput usersDb_ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput usersDb_ChatCreateManyUserInputEnvelope {\n  data: [usersDb_ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput usersDb_ChatCreateNestedManyWithoutUserInput {\n  create: usersDb_ChatCreateWithoutUserInput\n  connectOrCreate: usersDb_ChatCreateOrConnectWithoutUserInput\n  createMany: usersDb_ChatCreateManyUserInputEnvelope\n  connect: usersDb_ChatWhereUniqueInput\n}\n\ninput usersDb_UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: usersDb_ChatCreateNestedManyWithoutUserInput\n}\n\ninput usersDb_ChatUpdateWithoutUserInput {\n  message: usersDb_NullableStringFieldUpdateOperationsInput\n  createdAt: usersDb_DateTimeFieldUpdateOperationsInput\n}\n\ninput usersDb_ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: usersDb_ChatWhereUniqueInput!\n  update: usersDb_ChatUpdateWithoutUserInput!\n  create: usersDb_ChatCreateWithoutUserInput!\n}\n\ninput usersDb_ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: usersDb_ChatWhereUniqueInput!\n  data: usersDb_ChatUpdateWithoutUserInput!\n}\n\ninput usersDb_ChatScalarWhereInput {\n  AND: usersDb_ChatScalarWhereInput\n  OR: [usersDb_ChatScalarWhereInput]\n  NOT: usersDb_ChatScalarWhereInput\n  id: usersDb_IntFilter\n  message: usersDb_StringNullableFilter\n  createdAt: usersDb_DateTimeFilter\n  userId: usersDb_IntFilter\n}\n\ninput usersDb_ChatUpdateManyWithWhereWithoutUserInput {\n  where: usersDb_ChatScalarWhereInput!\n  data: usersDb_ChatUpdateManyMutationInput!\n}\n\ninput usersDb_ChatUpdateManyWithoutUserInput {\n  create: usersDb_ChatCreateWithoutUserInput\n  connectOrCreate: usersDb_ChatCreateOrConnectWithoutUserInput\n  upsert: usersDb_ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: usersDb_ChatCreateManyUserInputEnvelope\n  connect: usersDb_ChatWhereUniqueInput\n  set: usersDb_ChatWhereUniqueInput\n  disconnect: usersDb_ChatWhereUniqueInput\n  delete: usersDb_ChatWhereUniqueInput\n  update: usersDb_ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: usersDb_ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: usersDb_ChatScalarWhereInput\n}\n\ninput usersDb_UserUpdateInput {\n  email: usersDb_StringFieldUpdateOperationsInput\n  lastName: usersDb_StringFieldUpdateOperationsInput\n  firstName: usersDb_StringFieldUpdateOperationsInput\n  name: usersDb_StringFieldUpdateOperationsInput\n  userId: usersDb_StringFieldUpdateOperationsInput\n  avatarId: usersDb_NullableStringFieldUpdateOperationsInput\n  Chat: usersDb_ChatUpdateManyWithoutUserInput\n}\n\ninput usersDb_UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput usersDb_UserUpdateManyMutationInput {\n  email: usersDb_StringFieldUpdateOperationsInput\n  lastName: usersDb_StringFieldUpdateOperationsInput\n  firstName: usersDb_StringFieldUpdateOperationsInput\n  name: usersDb_StringFieldUpdateOperationsInput\n  userId: usersDb_StringFieldUpdateOperationsInput\n  avatarId: usersDb_NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  usersDb_createOneChat(data: usersDb_ChatCreateInput!): usersDb_Chat\n  usersDb_upsertOneChat(where: usersDb_ChatWhereUniqueInput!, create: usersDb_ChatCreateInput!, update: usersDb_ChatUpdateInput!): usersDb_Chat\n  usersDb_createManyChat(data: [usersDb_ChatCreateManyInput]!, skipDuplicates: Boolean): usersDb_AffectedRowsOutput\n  usersDb_deleteOneChat(where: usersDb_ChatWhereUniqueInput!): usersDb_Chat\n  usersDb_updateOneChat(data: usersDb_ChatUpdateInput!, where: usersDb_ChatWhereUniqueInput!): usersDb_Chat\n  usersDb_updateManyChat(data: usersDb_ChatUpdateManyMutationInput!, where: usersDb_ChatWhereInput): usersDb_AffectedRowsOutput\n  usersDb_deleteManyChat(where: usersDb_ChatWhereInput): usersDb_AffectedRowsOutput\n  usersDb_createOneUser(data: usersDb_UserCreateInput!): usersDb_User\n  usersDb_upsertOneUser(where: usersDb_UserWhereUniqueInput!, create: usersDb_UserCreateInput!, update: usersDb_UserUpdateInput!): usersDb_User\n  usersDb_createManyUser(data: [usersDb_UserCreateManyInput]!, skipDuplicates: Boolean): usersDb_AffectedRowsOutput\n  usersDb_deleteOneUser(where: usersDb_UserWhereUniqueInput!): usersDb_User\n  usersDb_updateOneUser(data: usersDb_UserUpdateInput!, where: usersDb_UserWhereUniqueInput!): usersDb_User\n  usersDb_updateManyUser(data: usersDb_UserUpdateManyMutationInput!, where: usersDb_UserWhereInput): usersDb_AffectedRowsOutput\n  usersDb_deleteManyUser(where: usersDb_UserWhereInput): usersDb_AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n\nenum Claim {\n  EMAIL\n  EMAIL_VERIFIED\n  NAME\n  NICKNAME\n  LOCATION\n  PROVIDER\n}\n\nenum COMMON_REGEX_PATTERN {\n  EMAIL\n  DOMAIN\n}\n\nenum WG_ROLE {\n  admin\n  user\n}\n\nenum WunderGraphDateTimeFormat {\n  \"\"\"2006-01-02T15:04:05-0700\"\"\"\n  ISO8601\n  \"\"\"Mon Jan _2 15:04:05 2006\"\"\"\n  ANSIC\n  \"\"\"Mon Jan _2 15:04:05 MST 2006\"\"\"\n  UnixDate\n  \"\"\"Mon Jan 02 15:04:05 -0700 2006\"\"\"\n  RubyDate\n  \"\"\"02 Jan 06 15:04 MST\"\"\"\n  RFC822\n  \"\"\"02 Jan 06 15:04 -0700\"\"\"\n  RFC822Z\n  \"\"\"Monday, 02-Jan-06 15:04:05 MST\"\"\"\n  RFC850\n  \"\"\"Mon, 02 Jan 2006 15:04:05 MST\"\"\"\n  RFC1123\n  \"\"\"Mon, 02 Jan 2006 15:04:05 -0700\"\"\"\n  RFC1123Z\n  \"\"\"2006-01-02T15:04:05Z07:00\"\"\"\n  RFC3339\n  \"\"\"2006-01-02T15:04:05.999999999Z07:00\"\"\"\n  RFC3339Nano\n  \"\"\"3:04PM\"\"\"\n  Kitchen\n  \"\"\"Jan _2 15:04:05\"\"\"\n  Stamp\n  \"\"\"Jan _2 15:04:05.000\"\"\"\n  StampMilli\n  \"\"\"Jan _2 15:04:05.000000\"\"\"\n  StampMicro\n  \"\"\"Jan _2 15:04:05.000000000\"\"\"\n  StampNano\n}\n",
      "datasourceConfigurations": [
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findFirstChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findManyChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_aggregateChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_groupByChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findUniqueChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findFirstUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_aggregateUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_groupByUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "usersDb_findUniqueUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_createOneChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_upsertOneChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_createManyChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_deleteOneChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_updateOneChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_updateManyChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_deleteManyChat"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_createOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_upsertOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_createManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_deleteOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_updateOneUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_updateManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Mutation",
              "fieldNames": [
                "usersDb_deleteManyUser"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "Chat"
              ]
            },
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "Chat",
                "_count"
              ]
            },
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "User"
              ]
            },
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "id",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId"
              ]
            },
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "id",
                "message",
                "createdAt",
                "userId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_all"
              ]
            },
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId"
              ]
            },
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "lastName",
                "firstName",
                "name",
                "userId",
                "avatarId",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseURL": {
              "kind": 0,
              "environmentVariableDefaultValue": "",
              "environmentVariableName": "",
              "placeholderVariableName": "",
              "staticVariableContent": "postgresql://admin:admin@localhost:5432/livechat?schema=public"
            },
            "prismaSchema": "model Chat {\n  id        Int      @id @default(autoincrement())\n  message   String?\n  createdAt DateTime @default(now())\n  userId    Int\n  User      User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique\n  lastName  String\n  firstName String\n  name      String\n  userId    String  @unique\n  avatarId  String?\n  Chat      Chat[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\ninput NestedDateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput DateTimeFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeFilter\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput ChatListRelationFilter {\n  every: ChatWhereInput\n  some: ChatWhereInput\n  none: ChatWhereInput\n}\n\ninput UserWhereInput {\n  AND: UserWhereInput\n  OR: [UserWhereInput]\n  NOT: UserWhereInput\n  id: IntFilter\n  email: StringFilter\n  lastName: StringFilter\n  firstName: StringFilter\n  name: StringFilter\n  userId: StringFilter\n  avatarId: StringNullableFilter\n  Chat: ChatListRelationFilter\n}\n\ninput UserRelationFilter {\n  is: UserWhereInput\n  isNot: UserWhereInput\n}\n\ninput ChatWhereInput {\n  AND: ChatWhereInput\n  OR: [ChatWhereInput]\n  NOT: ChatWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n  User: UserRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput ChatOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput UserOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  Chat: ChatOrderByRelationAggregateInput\n}\n\ninput ChatOrderByWithRelationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  User: UserOrderByWithRelationInput\n}\n\ninput ChatWhereUniqueInput {\n  id: Int\n}\n\nenum ChatScalarFieldEnum {\n  id\n  message\n  createdAt\n  userId\n}\n\ntype UserCountOutputType {\n  Chat: Int!\n}\n\ntype User {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]\n  _count: UserCountOutputType\n}\n\ntype Chat {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  User: User!\n}\n\ntype ChatCountAggregateOutputType {\n  id: Int!\n  message: Int!\n  createdAt: Int!\n  userId: Int!\n  _all: Int!\n}\n\ntype ChatAvgAggregateOutputType {\n  id: Float\n  userId: Float\n}\n\ntype ChatSumAggregateOutputType {\n  id: Int\n  userId: Int\n}\n\ntype ChatMinAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype ChatMaxAggregateOutputType {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int\n}\n\ntype AggregateChat {\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput ChatCountOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatAvgOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMaxOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatMinOrderByAggregateInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n}\n\ninput ChatSumOrderByAggregateInput {\n  id: SortOrder\n  userId: SortOrder\n}\n\ninput ChatOrderByWithAggregationInput {\n  id: SortOrder\n  message: SortOrder\n  createdAt: SortOrder\n  userId: SortOrder\n  _count: ChatCountOrderByAggregateInput\n  _avg: ChatAvgOrderByAggregateInput\n  _max: ChatMaxOrderByAggregateInput\n  _min: ChatMinOrderByAggregateInput\n  _sum: ChatSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedIntNullableFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntNullableFilter\n}\n\ninput NestedStringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput StringNullableWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableWithAggregatesFilter\n  _count: NestedIntNullableFilter\n  _min: NestedStringNullableFilter\n  _max: NestedStringNullableFilter\n}\n\ninput NestedDateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput DateTimeWithAggregatesFilter {\n  equals: DateTime\n  in: [DateTime]\n  notIn: [DateTime]\n  lt: DateTime\n  lte: DateTime\n  gt: DateTime\n  gte: DateTime\n  not: NestedDateTimeWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedDateTimeFilter\n  _max: NestedDateTimeFilter\n}\n\ninput ChatScalarWhereWithAggregatesInput {\n  AND: ChatScalarWhereWithAggregatesInput\n  OR: [ChatScalarWhereWithAggregatesInput]\n  NOT: ChatScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  message: StringNullableWithAggregatesFilter\n  createdAt: DateTimeWithAggregatesFilter\n  userId: IntWithAggregatesFilter\n}\n\ntype ChatGroupByOutputType {\n  id: Int!\n  message: String\n  createdAt: DateTime!\n  userId: Int!\n  _count: ChatCountAggregateOutputType\n  _avg: ChatAvgAggregateOutputType\n  _sum: ChatSumAggregateOutputType\n  _min: ChatMinAggregateOutputType\n  _max: ChatMaxAggregateOutputType\n}\n\ninput UserWhereUniqueInput {\n  id: Int\n  email: String\n  userId: String\n}\n\nenum UserScalarFieldEnum {\n  id\n  email\n  lastName\n  firstName\n  name\n  userId\n  avatarId\n}\n\ntype UserCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  lastName: Int!\n  firstName: Int!\n  name: Int!\n  userId: Int!\n  avatarId: Int!\n  _all: Int!\n}\n\ntype UserAvgAggregateOutputType {\n  id: Float\n}\n\ntype UserSumAggregateOutputType {\n  id: Int\n}\n\ntype UserMinAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype UserMaxAggregateOutputType {\n  id: Int\n  email: String\n  lastName: String\n  firstName: String\n  name: String\n  userId: String\n  avatarId: String\n}\n\ntype AggregateUser {\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ninput UserCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n}\n\ninput UserSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput UserOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  lastName: SortOrder\n  firstName: SortOrder\n  name: SortOrder\n  userId: SortOrder\n  avatarId: SortOrder\n  _count: UserCountOrderByAggregateInput\n  _avg: UserAvgOrderByAggregateInput\n  _max: UserMaxOrderByAggregateInput\n  _min: UserMinOrderByAggregateInput\n  _sum: UserSumOrderByAggregateInput\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput UserScalarWhereWithAggregatesInput {\n  AND: UserScalarWhereWithAggregatesInput\n  OR: [UserScalarWhereWithAggregatesInput]\n  NOT: UserScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  lastName: StringWithAggregatesFilter\n  firstName: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n  userId: StringWithAggregatesFilter\n  avatarId: StringNullableWithAggregatesFilter\n}\n\ntype UserGroupByOutputType {\n  id: Int!\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  _count: UserCountAggregateOutputType\n  _avg: UserAvgAggregateOutputType\n  _sum: UserSumAggregateOutputType\n  _min: UserMinAggregateOutputType\n  _max: UserMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): Chat\n  findManyChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum]): [Chat]!\n  aggregateChat(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput], cursor: ChatWhereUniqueInput, take: Int, skip: Int): AggregateChat!\n  groupByChat(where: ChatWhereInput, orderBy: [ChatOrderByWithAggregationInput], by: [ChatScalarFieldEnum]!, having: ChatScalarWhereWithAggregatesInput, take: Int, skip: Int): [ChatGroupByOutputType]!\n  findUniqueChat(where: ChatWhereUniqueInput!): Chat\n  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): User\n  findManyUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum]): [User]!\n  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!\n  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput], by: [UserScalarFieldEnum]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupByOutputType]!\n  findUniqueUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserCreateWithoutChatInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserCreateOrConnectWithoutChatInput {\n  where: UserWhereUniqueInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserCreateNestedOneWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  connect: UserWhereUniqueInput\n}\n\ninput ChatCreateInput {\n  message: String\n  createdAt: DateTime\n  User: UserCreateNestedOneWithoutChatInput!\n}\n\ninput NullableStringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput DateTimeFieldUpdateOperationsInput {\n  set: DateTime\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput UserUpdateWithoutChatInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ninput UserUpsertWithoutChatInput {\n  update: UserUpdateWithoutChatInput!\n  create: UserCreateWithoutChatInput!\n}\n\ninput UserUpdateOneRequiredWithoutChatInput {\n  create: UserCreateWithoutChatInput\n  connectOrCreate: UserCreateOrConnectWithoutChatInput\n  upsert: UserUpsertWithoutChatInput\n  connect: UserWhereUniqueInput\n  update: UserUpdateWithoutChatInput\n}\n\ninput ChatUpdateInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n  User: UserUpdateOneRequiredWithoutChatInput\n}\n\ninput ChatCreateManyInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n  userId: Int!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput ChatUpdateManyMutationInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatCreateWithoutUserInput {\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateOrConnectWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatCreateManyUserInput {\n  id: Int\n  message: String\n  createdAt: DateTime\n}\n\ninput ChatCreateManyUserInputEnvelope {\n  data: [ChatCreateManyUserInput]!\n  skipDuplicates: Boolean\n}\n\ninput ChatCreateNestedManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n}\n\ninput UserCreateInput {\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n  Chat: ChatCreateNestedManyWithoutUserInput\n}\n\ninput ChatUpdateWithoutUserInput {\n  message: NullableStringFieldUpdateOperationsInput\n  createdAt: DateTimeFieldUpdateOperationsInput\n}\n\ninput ChatUpsertWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  update: ChatUpdateWithoutUserInput!\n  create: ChatCreateWithoutUserInput!\n}\n\ninput ChatUpdateWithWhereUniqueWithoutUserInput {\n  where: ChatWhereUniqueInput!\n  data: ChatUpdateWithoutUserInput!\n}\n\ninput ChatScalarWhereInput {\n  AND: ChatScalarWhereInput\n  OR: [ChatScalarWhereInput]\n  NOT: ChatScalarWhereInput\n  id: IntFilter\n  message: StringNullableFilter\n  createdAt: DateTimeFilter\n  userId: IntFilter\n}\n\ninput ChatUpdateManyWithWhereWithoutUserInput {\n  where: ChatScalarWhereInput!\n  data: ChatUpdateManyMutationInput!\n}\n\ninput ChatUpdateManyWithoutUserInput {\n  create: ChatCreateWithoutUserInput\n  connectOrCreate: ChatCreateOrConnectWithoutUserInput\n  upsert: ChatUpsertWithWhereUniqueWithoutUserInput\n  createMany: ChatCreateManyUserInputEnvelope\n  connect: ChatWhereUniqueInput\n  set: ChatWhereUniqueInput\n  disconnect: ChatWhereUniqueInput\n  delete: ChatWhereUniqueInput\n  update: ChatUpdateWithWhereUniqueWithoutUserInput\n  updateMany: ChatUpdateManyWithWhereWithoutUserInput\n  deleteMany: ChatScalarWhereInput\n}\n\ninput UserUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n  Chat: ChatUpdateManyWithoutUserInput\n}\n\ninput UserCreateManyInput {\n  id: Int\n  email: String!\n  lastName: String!\n  firstName: String!\n  name: String!\n  userId: String!\n  avatarId: String\n}\n\ninput UserUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  lastName: StringFieldUpdateOperationsInput\n  firstName: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  userId: StringFieldUpdateOperationsInput\n  avatarId: NullableStringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOneChat(data: ChatCreateInput!): Chat\n  upsertOneChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat\n  createManyChat(data: [ChatCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneChat(where: ChatWhereUniqueInput!): Chat\n  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat\n  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput\n  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput\n  createOneUser(data: UserCreateInput!): User\n  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User\n  createManyUser(data: [UserCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneUser(where: UserWhereUniqueInput!): User\n  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput\n  deleteManyUser(where: UserWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar UUID\n\nscalar BigInt\n",
            "closeTimeoutSeconds": 30,
            "jsonTypeFields": [],
            "jsonInputVariables": []
          },
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserCountOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_User",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_Chat",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_AggregateChat",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_ChatGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserCountAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserAvgAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserSumAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserMinAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserMaxAggregateOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_AggregateUser",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_UserGroupByOutputType",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        },
        {
          "kind": 0,
          "rootNodes": [
            {
              "typeName": "usersDb_AffectedRowsOutput",
              "fieldNames": [
                "_join"
              ]
            }
          ],
          "childNodes": [],
          "customStatic": {
            "data": {
              "kind": 0,
              "staticVariableContent": "{}",
              "placeholderVariableName": "",
              "environmentVariableDefaultValue": "",
              "environmentVariableName": ""
            }
          },
          "overrideFieldPathFromAlias": false,
          "directives": []
        }
      ],
      "fieldConfigurations": [
        {
          "typeName": "usersDb_User",
          "fieldName": "Chat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findFirstChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findManyChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManyChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_aggregateChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregateChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_groupByChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupByChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findUniqueChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniqueChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findFirstUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findFirstUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findManyUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_aggregateUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "aggregateUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_groupByUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "groupByUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Query",
          "fieldName": "usersDb_findUniqueUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "findUniqueUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_createOneChat",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOneChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_upsertOneChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOneChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_createManyChat",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createManyChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_deleteOneChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOneChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_updateOneChat",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOneChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_updateManyChat",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManyChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_deleteManyChat",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManyChat"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_createOneUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_upsertOneUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "upsertOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_createManyUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "createManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_deleteOneUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_updateOneUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateOneUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_updateManyUser",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "updateManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "Mutation",
          "fieldName": "usersDb_deleteManyUser",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [
            "deleteManyUser"
          ],
          "requiresFields": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserCountOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_User",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_Chat",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_AggregateChat",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_ChatGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserCountAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserAvgAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserSumAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserMinAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserMaxAggregateOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_AggregateUser",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_UserGroupByOutputType",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        },
        {
          "typeName": "usersDb_AffectedRowsOutput",
          "fieldName": "_join",
          "disableDefaultFieldMapping": true,
          "path": [
            "_join"
          ],
          "requiresFields": [],
          "argumentsConfiguration": [],
          "unescapeResponseJson": false
        }
      ],
      "typeConfigurations": [
        {
          "typeName": "usersDb_NestedIntFilter",
          "renameTo": "NestedIntFilter"
        },
        {
          "typeName": "usersDb_IntFilter",
          "renameTo": "IntFilter"
        },
        {
          "typeName": "usersDb_QueryMode",
          "renameTo": "QueryMode"
        },
        {
          "typeName": "usersDb_NestedStringNullableFilter",
          "renameTo": "NestedStringNullableFilter"
        },
        {
          "typeName": "usersDb_StringNullableFilter",
          "renameTo": "StringNullableFilter"
        },
        {
          "typeName": "usersDb_NestedDateTimeFilter",
          "renameTo": "NestedDateTimeFilter"
        },
        {
          "typeName": "usersDb_DateTimeFilter",
          "renameTo": "DateTimeFilter"
        },
        {
          "typeName": "usersDb_NestedStringFilter",
          "renameTo": "NestedStringFilter"
        },
        {
          "typeName": "usersDb_StringFilter",
          "renameTo": "StringFilter"
        },
        {
          "typeName": "usersDb_ChatListRelationFilter",
          "renameTo": "ChatListRelationFilter"
        },
        {
          "typeName": "usersDb_UserWhereInput",
          "renameTo": "UserWhereInput"
        },
        {
          "typeName": "usersDb_UserRelationFilter",
          "renameTo": "UserRelationFilter"
        },
        {
          "typeName": "usersDb_ChatWhereInput",
          "renameTo": "ChatWhereInput"
        },
        {
          "typeName": "usersDb_SortOrder",
          "renameTo": "SortOrder"
        },
        {
          "typeName": "usersDb_ChatOrderByRelationAggregateInput",
          "renameTo": "ChatOrderByRelationAggregateInput"
        },
        {
          "typeName": "usersDb_UserOrderByWithRelationInput",
          "renameTo": "UserOrderByWithRelationInput"
        },
        {
          "typeName": "usersDb_ChatOrderByWithRelationInput",
          "renameTo": "ChatOrderByWithRelationInput"
        },
        {
          "typeName": "usersDb_ChatWhereUniqueInput",
          "renameTo": "ChatWhereUniqueInput"
        },
        {
          "typeName": "usersDb_ChatScalarFieldEnum",
          "renameTo": "ChatScalarFieldEnum"
        },
        {
          "typeName": "usersDb_UserCountOutputType",
          "renameTo": "UserCountOutputType"
        },
        {
          "typeName": "usersDb_User",
          "renameTo": "User"
        },
        {
          "typeName": "usersDb_Chat",
          "renameTo": "Chat"
        },
        {
          "typeName": "usersDb_ChatCountAggregateOutputType",
          "renameTo": "ChatCountAggregateOutputType"
        },
        {
          "typeName": "usersDb_ChatAvgAggregateOutputType",
          "renameTo": "ChatAvgAggregateOutputType"
        },
        {
          "typeName": "usersDb_ChatSumAggregateOutputType",
          "renameTo": "ChatSumAggregateOutputType"
        },
        {
          "typeName": "usersDb_ChatMinAggregateOutputType",
          "renameTo": "ChatMinAggregateOutputType"
        },
        {
          "typeName": "usersDb_ChatMaxAggregateOutputType",
          "renameTo": "ChatMaxAggregateOutputType"
        },
        {
          "typeName": "usersDb_AggregateChat",
          "renameTo": "AggregateChat"
        },
        {
          "typeName": "usersDb_ChatCountOrderByAggregateInput",
          "renameTo": "ChatCountOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_ChatAvgOrderByAggregateInput",
          "renameTo": "ChatAvgOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_ChatMaxOrderByAggregateInput",
          "renameTo": "ChatMaxOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_ChatMinOrderByAggregateInput",
          "renameTo": "ChatMinOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_ChatSumOrderByAggregateInput",
          "renameTo": "ChatSumOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_ChatOrderByWithAggregationInput",
          "renameTo": "ChatOrderByWithAggregationInput"
        },
        {
          "typeName": "usersDb_NestedFloatFilter",
          "renameTo": "NestedFloatFilter"
        },
        {
          "typeName": "usersDb_NestedIntWithAggregatesFilter",
          "renameTo": "NestedIntWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_IntWithAggregatesFilter",
          "renameTo": "IntWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_NestedIntNullableFilter",
          "renameTo": "NestedIntNullableFilter"
        },
        {
          "typeName": "usersDb_NestedStringNullableWithAggregatesFilter",
          "renameTo": "NestedStringNullableWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_StringNullableWithAggregatesFilter",
          "renameTo": "StringNullableWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_NestedDateTimeWithAggregatesFilter",
          "renameTo": "NestedDateTimeWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_DateTimeWithAggregatesFilter",
          "renameTo": "DateTimeWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_ChatScalarWhereWithAggregatesInput",
          "renameTo": "ChatScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "usersDb_ChatGroupByOutputType",
          "renameTo": "ChatGroupByOutputType"
        },
        {
          "typeName": "usersDb_UserWhereUniqueInput",
          "renameTo": "UserWhereUniqueInput"
        },
        {
          "typeName": "usersDb_UserScalarFieldEnum",
          "renameTo": "UserScalarFieldEnum"
        },
        {
          "typeName": "usersDb_UserCountAggregateOutputType",
          "renameTo": "UserCountAggregateOutputType"
        },
        {
          "typeName": "usersDb_UserAvgAggregateOutputType",
          "renameTo": "UserAvgAggregateOutputType"
        },
        {
          "typeName": "usersDb_UserSumAggregateOutputType",
          "renameTo": "UserSumAggregateOutputType"
        },
        {
          "typeName": "usersDb_UserMinAggregateOutputType",
          "renameTo": "UserMinAggregateOutputType"
        },
        {
          "typeName": "usersDb_UserMaxAggregateOutputType",
          "renameTo": "UserMaxAggregateOutputType"
        },
        {
          "typeName": "usersDb_AggregateUser",
          "renameTo": "AggregateUser"
        },
        {
          "typeName": "usersDb_UserCountOrderByAggregateInput",
          "renameTo": "UserCountOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_UserAvgOrderByAggregateInput",
          "renameTo": "UserAvgOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_UserMaxOrderByAggregateInput",
          "renameTo": "UserMaxOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_UserMinOrderByAggregateInput",
          "renameTo": "UserMinOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_UserSumOrderByAggregateInput",
          "renameTo": "UserSumOrderByAggregateInput"
        },
        {
          "typeName": "usersDb_UserOrderByWithAggregationInput",
          "renameTo": "UserOrderByWithAggregationInput"
        },
        {
          "typeName": "usersDb_NestedStringWithAggregatesFilter",
          "renameTo": "NestedStringWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_StringWithAggregatesFilter",
          "renameTo": "StringWithAggregatesFilter"
        },
        {
          "typeName": "usersDb_UserScalarWhereWithAggregatesInput",
          "renameTo": "UserScalarWhereWithAggregatesInput"
        },
        {
          "typeName": "usersDb_UserGroupByOutputType",
          "renameTo": "UserGroupByOutputType"
        },
        {
          "typeName": "usersDb_UserCreateWithoutChatInput",
          "renameTo": "UserCreateWithoutChatInput"
        },
        {
          "typeName": "usersDb_UserCreateOrConnectWithoutChatInput",
          "renameTo": "UserCreateOrConnectWithoutChatInput"
        },
        {
          "typeName": "usersDb_UserCreateNestedOneWithoutChatInput",
          "renameTo": "UserCreateNestedOneWithoutChatInput"
        },
        {
          "typeName": "usersDb_ChatCreateInput",
          "renameTo": "ChatCreateInput"
        },
        {
          "typeName": "usersDb_NullableStringFieldUpdateOperationsInput",
          "renameTo": "NullableStringFieldUpdateOperationsInput"
        },
        {
          "typeName": "usersDb_DateTimeFieldUpdateOperationsInput",
          "renameTo": "DateTimeFieldUpdateOperationsInput"
        },
        {
          "typeName": "usersDb_StringFieldUpdateOperationsInput",
          "renameTo": "StringFieldUpdateOperationsInput"
        },
        {
          "typeName": "usersDb_UserUpdateWithoutChatInput",
          "renameTo": "UserUpdateWithoutChatInput"
        },
        {
          "typeName": "usersDb_UserUpsertWithoutChatInput",
          "renameTo": "UserUpsertWithoutChatInput"
        },
        {
          "typeName": "usersDb_UserUpdateOneRequiredWithoutChatInput",
          "renameTo": "UserUpdateOneRequiredWithoutChatInput"
        },
        {
          "typeName": "usersDb_ChatUpdateInput",
          "renameTo": "ChatUpdateInput"
        },
        {
          "typeName": "usersDb_ChatCreateManyInput",
          "renameTo": "ChatCreateManyInput"
        },
        {
          "typeName": "usersDb_AffectedRowsOutput",
          "renameTo": "AffectedRowsOutput"
        },
        {
          "typeName": "usersDb_ChatUpdateManyMutationInput",
          "renameTo": "ChatUpdateManyMutationInput"
        },
        {
          "typeName": "usersDb_ChatCreateWithoutUserInput",
          "renameTo": "ChatCreateWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatCreateOrConnectWithoutUserInput",
          "renameTo": "ChatCreateOrConnectWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatCreateManyUserInput",
          "renameTo": "ChatCreateManyUserInput"
        },
        {
          "typeName": "usersDb_ChatCreateManyUserInputEnvelope",
          "renameTo": "ChatCreateManyUserInputEnvelope"
        },
        {
          "typeName": "usersDb_ChatCreateNestedManyWithoutUserInput",
          "renameTo": "ChatCreateNestedManyWithoutUserInput"
        },
        {
          "typeName": "usersDb_UserCreateInput",
          "renameTo": "UserCreateInput"
        },
        {
          "typeName": "usersDb_ChatUpdateWithoutUserInput",
          "renameTo": "ChatUpdateWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatUpsertWithWhereUniqueWithoutUserInput",
          "renameTo": "ChatUpsertWithWhereUniqueWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatUpdateWithWhereUniqueWithoutUserInput",
          "renameTo": "ChatUpdateWithWhereUniqueWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatScalarWhereInput",
          "renameTo": "ChatScalarWhereInput"
        },
        {
          "typeName": "usersDb_ChatUpdateManyWithWhereWithoutUserInput",
          "renameTo": "ChatUpdateManyWithWhereWithoutUserInput"
        },
        {
          "typeName": "usersDb_ChatUpdateManyWithoutUserInput",
          "renameTo": "ChatUpdateManyWithoutUserInput"
        },
        {
          "typeName": "usersDb_UserUpdateInput",
          "renameTo": "UserUpdateInput"
        },
        {
          "typeName": "usersDb_UserCreateManyInput",
          "renameTo": "UserCreateManyInput"
        },
        {
          "typeName": "usersDb_UserUpdateManyMutationInput",
          "renameTo": "UserUpdateManyMutationInput"
        }
      ]
    },
    "s3UploadConfiguration": [
      {
        "name": "minio",
        "accessKeyID": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "test"
        },
        "bucketLocation": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "eu-central-1"
        },
        "bucketName": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "uploads"
        },
        "endpoint": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "storage.live.chat.local"
        },
        "secretAccessKey": {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "12345678"
        },
        "useSSL": false
      }
    ],
    "corsConfiguration": {
      "maxAge": 120,
      "allowedHeaders": [
        "*"
      ],
      "allowedMethods": [
        "GET",
        "POST"
      ],
      "exposedHeaders": [
        "*"
      ],
      "allowCredentials": true,
      "allowedOrigins": [
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://localhost:3000"
        },
        {
          "kind": 0,
          "environmentVariableDefaultValue": "",
          "environmentVariableName": "",
          "placeholderVariableName": "",
          "staticVariableContent": "http://live.chat.local"
        }
      ]
    },
    "authenticationConfig": {
      "cookieBased": {
        "providers": [
          {
            "kind": 1,
            "oidcConfig": {
              "clientId": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "live-chat"
              },
              "clientSecret": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "6KEAotV7sZ8Jxv0mjvaGai2HogVzXuhY"
              },
              "issuer": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "http://keycloak.local/auth/realms/LiveChat"
              }
            },
            "id": "keycloak"
          },
          {
            "kind": 0,
            "githubConfig": {
              "clientId": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "demo"
              },
              "clientSecret": {
                "kind": 0,
                "environmentVariableDefaultValue": "",
                "environmentVariableName": "",
                "placeholderVariableName": "",
                "staticVariableContent": "demo"
              }
            },
            "id": "github"
          }
        ],
        "authorizedRedirectUris": [],
        "authorizedRedirectUriRegexes": [
          {
            "kind": 0,
            "environmentVariableDefaultValue": "",
            "environmentVariableName": "",
            "placeholderVariableName": "",
            "staticVariableContent": "http://live.chat.local/*"
          },
          {
            "kind": 0,
            "environmentVariableDefaultValue": "",
            "environmentVariableName": "",
            "placeholderVariableName": "",
            "staticVariableContent": "http://localhost:3000/*"
          }
        ]
      },
      "hooks": {
        "postAuthentication": false,
        "mutatingPostAuthentication": true,
        "revalidateAuthentication": false
      },
      "jwksBased": {
        "providers": []
      }
    },
    "additionalHostNames": [
      {
        "kind": 0,
        "environmentVariableDefaultValue": "",
        "environmentVariableName": "",
        "placeholderVariableName": "",
        "staticVariableContent": "api.live.chat.local"
      }
    ]
  },
  "dangerouslyEnableGraphQLEndpoint": false
}